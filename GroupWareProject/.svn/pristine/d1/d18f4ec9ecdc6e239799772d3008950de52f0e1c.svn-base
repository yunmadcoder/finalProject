package kr.or.ddit.groupware.service.mail;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.MapperFeature;

import kr.or.ddit.groupware.mapper.mail.IMailMapper;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.vo.EmailReceptionVO;
import kr.or.ddit.groupware.vo.EmailVO;
import kr.or.ddit.groupware.vo.PaginationInfoVO;

/**
 * 메일 서비스 구현체
 * @author <strong>최소희</strong>
 * @version 1.0
 * @see MailServiceImpl
 */
@Service
public class MailServiceImpl implements IMailService {

	@Inject
	private IMailMapper mapper;

	@Override
	public EmailVO selectEmail(int emailNo) {
		return mapper.selectEmail(emailNo);
	}

	@Override
	public Result deleteEmail(int emailNo) {
		Result result = null;
		int status = mapper.deleteEmail(emailNo);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result deleteReception(EmailReceptionVO emailReceptionVO) {
		Result result = null;
		int status = mapper.deleteReception(emailReceptionVO);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public int selectEmailCount(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectEmailCount(pagingVO);
	}

	@Override
	public List<EmailVO> selectEmailList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectEmailList(pagingVO);
	}

	@Override
	public int selectNoReadCount(int emplNo) {
		return mapper.selectNoReadCount(emplNo);
	}

	@Override
	public Result readEmail(EmailReceptionVO emailReceptionVO) {
		Result result = null;
		int status = mapper.readEmail(emailReceptionVO);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result importantEmail(int emailNo) {
		Result result = null;
		int status = mapper.importantEmail(emailNo);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result importantReception(EmailReceptionVO emailReceptionVO) {
		Result result = null;
		int status = mapper.importantReception(emailReceptionVO);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public int selectSentCount(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectSentCount(pagingVO);
	}

	@Override
	public List<EmailVO> selectSentList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectSentList(pagingVO);
	}

	@Override
	public List<EmailReceptionVO> selectReceptionList(int emailNo) {
		return mapper.selectReceptionList(emailNo);
	}

	@Override
	public List<EmailVO> selectNoReadList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectNoReadList(pagingVO);
	}

	@Override
	public int selectImportantCount(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectImportantCount(pagingVO);
	}

	@Override
	public List<EmailVO> selectImportantList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectImportantList(pagingVO);
	}

	@Override
	public int selectImportantNoReadCount(int emplNo) {
		return mapper.selectImportantNoReadCount(emplNo);
	}

	@Override
	public int selectToMeCount(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectToMeCount(pagingVO);
	}

	@Override
	public List<EmailVO> selectToMeList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectToMeList(pagingVO);	}

	@Override
	public int selectToMeNoReadCount(int emplNo) {
		return mapper.selectToMeNoReadCount(emplNo);
	}

	@Override
	public int selectReservationCount(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectReservationCount(pagingVO);
	}

	@Override
	public List<EmailVO> selectReservationList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectReservationList(pagingVO);
	}

	@Override
	public int selectDraftCount(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectDraftCount(pagingVO);
	}

	@Override
	public List<EmailVO> selectDraftList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectDraftList(pagingVO);
	}

	@Override
	public Result insertEmail(EmailVO emailVO, int[] receiverArray, int[] ccArray) {
		Result result = null;
		
		int status = mapper.insertEmail(emailVO);
		
		if(status > 0) {
			
			EmailReceptionVO emailReceptionVO = new EmailReceptionVO();
			
			emailReceptionVO.setEmailNo(emailVO.getEmailNo());
			
			if(receiverArray != null && receiverArray.length > 0 ) {
				for (int i = 0; i < receiverArray.length; i++) {
					emailReceptionVO.setEmplNo(receiverArray[i]);
					emailReceptionVO.setEmailRecptnRecpTypeCode("E201");
					mapper.insertReception(emailReceptionVO);
				}
			}
			
			if(ccArray != null && ccArray.length > 0) {
				for (int i = 0; i < ccArray.length; i++) {
					emailReceptionVO.setEmplNo(ccArray[i]);
					emailReceptionVO.setEmailRecptnRecpTypeCode("E202");
					mapper.insertReception(emailReceptionVO);
				}
			}
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result updateEmail(EmailVO emailVO, int[] receiverArray, int[] ccArray) {
		Result result = null;
		
		int status = mapper.updateEmail(emailVO);
		
		if(status > 0) {
			
			//진짜 데이터 날리기
			mapper.deleteReceptionList(emailVO.getEmailNo()); 
			
			//다시 인서트하기
			EmailReceptionVO emailReceptionVO = new EmailReceptionVO();
			
			emailReceptionVO.setEmailNo(emailVO.getEmailNo());
			
			if(receiverArray != null && receiverArray.length > 0 ) {
				for (int i = 0; i < receiverArray.length; i++) {
					emailReceptionVO.setEmplNo(receiverArray[i]);
					emailReceptionVO.setEmailRecptnRecpTypeCode("E201");
					mapper.insertReception(emailReceptionVO);
				}
			}
			
			if(ccArray != null && ccArray.length > 0) {
				for (int i = 0; i < ccArray.length; i++) {
					emailReceptionVO.setEmplNo(ccArray[i]);
					emailReceptionVO.setEmailRecptnRecpTypeCode("E202");
					mapper.insertReception(emailReceptionVO);
				}
			}
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public EmailReceptionVO selectReceptionOne(int emailNo) {
		return mapper.selectReceptionOne(emailNo);
	}

	@Override
	public Result existReception(EmailReceptionVO emailReceptionVO) {
		Result result = null;
		int status = mapper.existReception(emailReceptionVO);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result unimportantReception(EmailReceptionVO emailReceptionVO) {
		Result result = null;
		int status = mapper.unimportantReception(emailReceptionVO);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result unimportantEmail(int emailNo) {
		Result result = null;
		int status = mapper.unimportantEmail(emailNo);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result recoverReception(EmailReceptionVO emailReceptionVO) {
		Result result = null;
		int status = mapper.recoverReception(emailReceptionVO);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result recoverEmail(int emailNo) {
		Result result = null;
		int status = mapper.recoverEmail(emailNo);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result clearReception(EmailReceptionVO emailReceptionVO) {
		Result result = null;
		int status = mapper.clearReception(emailReceptionVO);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public Result clearEmail(int emailNo) {
		Result result = null;
		int status = mapper.clearEmail(emailNo);
		if(status > 0) {
			result = Result.OK;
		}else {
			result = Result.FAILED;
		}
		return result;
	}

	@Override
	public int selectTrashCount(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectTrashCount(pagingVO);
	}

	@Override
	public List<EmailVO> selectTrashList(PaginationInfoVO<EmailVO> pagingVO) {
		return mapper.selectTrashList(pagingVO);
	}

	@Override
	public int selectTrashNoReadCount(int emplNo) {
		return mapper.selectTrashNoReadCount(emplNo);
	}

	@Override
	public int receptionCount(int emailNo) {
		return mapper.receptionCount(emailNo);
	}

	@Override
	public int receptionReadCount(int emailNo) {
		return mapper.receptionReadCount(emailNo);
	}
}
