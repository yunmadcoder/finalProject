package kr.or.ddit.groupware.service.drive;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.inject.Inject;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.groupware.mapper.drive.IDriveMapper;
import kr.or.ddit.groupware.util.FileUtil;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.util.TableCode;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.DriveFolderVO;
import kr.or.ddit.groupware.vo.DriveItemVO;
import kr.or.ddit.groupware.vo.DriveVO;

/**
 * 자료실 서비스 구현체
 * 
 * @author <strong>이명문</strong>
 * @version 1.0
 * @see DriveServiceImpl
 */

@Service
public class DriveServiceImpl implements IDriveService {

	@Inject
	private IDriveMapper driveMapper;

	@Inject
	private FileUtil fileUtil;

	@Resource(name = "path")
	private String resourcePath;

	private static String[] folders;
	static {
		folders = new String[] {
				"company", "department", "private"
		};
	}

	@Transactional(rollbackFor = {
			RuntimeException.class, Exception.class
	})
	@Override
	public Result saveUploadFiles(DriveVO driveVO) {
		CustomUser user = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		int emplNo = user.getEmployeeVO().getEmplNo();
		String savedPath = fileUtil.getFolderName(resourcePath, TableCode.DRIVE);
		
		List<MultipartFile> files = driveVO.getFiles();

		for (MultipartFile file : files) {
			String savedName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
			String uploadedFileName = savedPath.replace(File.separatorChar, '/') + "/" + savedName;
			DriveVO dVO = DriveVO.builder().emplNo(emplNo).fileNm(savedName)
					.orgnlFilename(file.getOriginalFilename()).fileSize(file.getSize())
					.fileFancysize(FileUtils.byteCountToDisplaySize(file.getSize()))
					.fileMimeType(fileUtil.getMediaType(file.getOriginalFilename()).toString())
					.fileExtsn(FilenameUtils.getExtension(uploadedFileName)).filePath(uploadedFileName)
					.fileRegister(emplNo).fileRgsde(new Date()).fileUpdusr(emplNo).fileUpdde(new Date()).build();
			
			int result = driveMapper.saveUploadFile(dVO);
		

			if (result <= 0) {
				new RuntimeException();
				return Result.FAILED;
			}
			DriveVO dVo2 = DriveVO.builder().fileNo(dVO.getFileNo()).upperFldrNo(driveVO.getUpperFldrNo()).build();
			
			if(driveVO.getUpperFldrNo() != 0) {
				int uploadResult = driveMapper.insertFolderFile(dVo2);
				
				if(uploadResult <= 0) {
					new RuntimeException();
					return Result.FAILED;
				}
			}
			
			File saveFile = new File(savedPath, savedName);

			try {
				file.transferTo(saveFile);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return Result.OK;
	}

	@Override
	public List<DriveItemVO> selectDriveMainFiles(DriveItemVO driveItemVO) {
		return driveMapper.selectDriveMainFiles(driveItemVO);
	}

	@Override
	public ResponseEntity<byte[]> imageFileView(String filePath) {
		return fileUtil.getFileEntity(filePath, false);
	}

	@Override
	public int createNewFolder(DriveFolderVO driveFolderVO) {

		String fldrPath = getFolderPath(driveFolderVO);
		driveFolderVO.setFldrPath(fldrPath);

		int result = driveMapper.createNewFolder(driveFolderVO);
		if (result > 0) {
			return driveFolderVO.getFldrNo();
		}

		return 0;
	}

	private String getFolderType(String type) {
		return folders[Integer.parseInt(type)];
	}

	public String getFolderPath(DriveFolderVO driveFolderVO) {
		String path = fileUtil.getFolderName(TableCode.DRIVE) + '/' + getFolderType(driveFolderVO.getFldrType()) + '/' + driveFolderVO.getFldrNm();
		fileUtil.createFolder(path);
		return path;
	}

	@Override
	public Result editName(DriveItemVO driveItemVO) {
		String type = driveItemVO.getItemType();

		int result = 0;

		if (type.equals("FILE")) {
			result = driveMapper.editFileName(driveItemVO);
		}
		else {
			result = driveMapper.editFolderName(driveItemVO);
		}

		if (result > 0) return Result.OK;

		return Result.FAILED;

	}

	@Override
	public List<DriveFolderVO> getFolder(String fldrType) {
		return driveMapper.getFolder(fldrType);
	}

	@Transactional(rollbackFor = {SQLException.class})
	@Override
	public Result deleteFile(DriveItemVO driveItemVO) {
		Integer[] delFiles = driveItemVO.getDelFiles();
		Integer[] delFolders = driveItemVO.getDelFolders();
		
		if(delFiles.length > 0) {
			for (Integer fileNo : delFiles) {
				int result = driveMapper.deleteFile(fileNo);
				
				if(result <= 0) {
					new SQLException();
				}
			}
		}
		
		if(delFolders.length > 0) {
			for (Integer fldrNo : delFolders) {
				int result = driveMapper.deleteFolder(fldrNo);
				
				if(result <= 0) {
					new SQLException();
				}
			}
		}
	
		
		return Result.OK;
	}

	@Transactional(rollbackFor = Exception.class)
	@Override
	public Result fileMove(DriveItemVO driveItemVO) {
		int cnt = 0;
		
		if(driveItemVO.getItemType().equals("FILE")) {
			
			int result = driveMapper.isExistInFolder(driveItemVO);
			
			if(result > 0 ) {
				cnt = driveMapper.existFileMove(driveItemVO);
			}else {
				cnt = driveMapper.notExistFileMove(driveItemVO);
			}
		}else 
			cnt = driveMapper.folderMove(driveItemVO);
		
		if(cnt > 0)
			return Result.OK;
		
		return Result.FAILED;
	}

	@Override
	public List<DriveItemVO> searchDrive(DriveItemVO driveItemVO) {
		return driveMapper.searchDrive(driveItemVO);
	}
}
