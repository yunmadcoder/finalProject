<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.groupware.mapper.employee.IEmployeeMapper">

	<resultMap type="employeeVO" id="employeeMap">
		<id property="emplNo" column="EMPL_NO"/>
		<result property="emplNo" column="EMPL_NO"/>
		<result property="clsfCode" column="CLSF_CODE"/>
		<result property="deptCode" column="DEPT_CODE"/>
		<result property="deptNm" column="DEPT_NM"/>
		<result property="emplNm" column="EMPL_NM"/>
		<result property="emplId" column="EMPL_ID"/>
		<result property="emplPassword" column="EMPL_PASSWORD"/>
		<result property="emplZip" column="EMPL_ZIP"/>
		<result property="emplAdres" column="EMPL_ADRES"/>
		<result property="emplAdres2" column="EMPL_ADRES2"/>
		<result property="emplEmail" column="EMPL_EMAIL"/>
		<result property="emplTelno" column="EMPL_TELNO"/>
		<result property="emplIhidnum" column="EMPL_IHIDNUM"/>
		<result property="emplProflPhoto" column="EMPL_PROFL_PHOTO"/>
		<result property="emplSign" column="EMPL_SIGN"/>
		<result property="enabled" column="ENABLED"/>
		<result property="emplEncpn" column="EMPL_ENCPN"/>
		<result property="rgsde" column="RGSDE"/>
		<result property="register" column="REGISTER"/>
		<result property="updde" column="UPDDE"/>
		<result property="updusr" column="UPDUSR"/>
		<collection property="classOfPositionVO" resultMap="classOfPositionMap"/>
		<collection property="AuthList" resultMap="empAuthorityMap" />
	</resultMap>
	
	<resultMap type="classOfPositionVO" id="classOfPositionMap">
		<id property="clsfCode" column="CLSF_CODE"/>
		<result property="clsfCode" column="CLSF_CODE"/>
		<result property="clsfNm" column="CLSF_NM"/>
		<result property="clsfLevel" column="CLSF_LEVEL"/>
		<result property="useYn" column="USE_YN"/>
		<result property="rgsde" column="RGSDE"/>
		<result property="register" column="REGISTER"/>
		<result property="updde" column="UPDDE"/>
		<result property="updusr" column="UPDUSR"/>
	</resultMap>
	
	<resultMap type="empAuthorityVO" id="empAuthorityMap">
		<result property="authorNo" column="author_no" />
		<result property="emplNo" column="empl_no" />
		<result property="authorNm" column="author_nm" />
		<result property="useYn" column="use_yn" />
	</resultMap>
	
	<select id="selectEmployee" parameterType="int" resultMap="employeeMap">
		SELECT
   			a.EMPL_NO,
   			a.clsf_code,
   			b.CLSF_NM,
   			c.CMMN_CODE as DEPT_CODE,
   			c.CMMN_CODE_NAME1 as DEPT_NM,
   			EMPL_NM, EMPL_ID,
   			EMPL_PASSWORD,
   			EMPL_ZIP,
   			EMPL_ADRES,
   			EMPL_ADRES2,
   			EMPL_EMAIL,
   			EMPL_TELNO,
   			EMPL_IHIDNUM,
   			EMPL_PROFL_PHOTO,
   			EMPL_SIGN,
   			a.ENABLED,
   			EMPL_ENCPN,
   			a.RGSDE,
   			a.REGISTER,
   			a.UPDDE,
   			a.UPDUSR
		FROM 
		    EMPLOYEE a
		INNER JOIN 
		    CLASS_OF_POSITION b ON a.CLSF_CODE = b.CLSF_CODE
		INNER JOIN 
		    COMM_CODE c ON a.DEPT_CODE = c.CMMN_CODE
		WHERE
		    a.EMPL_NO = #{emplNo}
	</select>
	
	<select id="pwCheck" parameterType="employeeVO" resultType="int">
		SELECT
			COUNT(EMPL_NO)
		FROM
			EMPLOYEE
		WHERE
			EMPL_NO = #{emplNo} and EMPL_PASSWORD = #{emplPassword}
	</select>
	
	<update id="updateEmployee" parameterType="employeeVO">
		UPDATE
			EMPLOYEE
		SET 
		    EMPL_ZIP = #{emplZip},
		    EMPL_ADRES = #{emplAdres},
		    EMPL_ADRES2 = #{emplAdres2},
		    EMPL_EMAIL = #{emplEmail},
		    <if test="emplProflPhoto != null and emplProflPhoto != ''">
		    	EMPL_PROFL_PHOTO = #{emplProflPhoto},
			</if>
		    EMPL_TELNO = #{emplTelno},
		    UPDDE = sysdate,
		    UPDUSR = #{emplNo}
		WHERE
			empl_no = #{emplNo}
	</update>
	
	<!-- DEPT_CODE = DEPT_CODE -->
	<select id="selectAllEmpl" resultType="employeeVO">
		SELECT
		    a.empl_no,
		    a.clsf_code,
		    b.clsf_nm,
		    a.dept_code,
		    a.empl_nm,
		    a.empl_id,
		    a.empl_email,
		    a.empl_telno,
		    a.EMPL_PROFL_PHOTO
		FROM
		    employee a, class_of_position b
		where
		    enabled= '1' and a.clsf_code = b.clsf_code
		order by a.clsf_code desc
	</select>
	
    <!-- DEPT_CODE = 팀명(CMMN_CODE_NAME1) -->
	<select id="selectAllEmpl2" resultType="employeeVO">
		SELECT
		    a.empl_no,
		    a.clsf_code,
		    b.clsf_nm,
		    a.dept_code,
		    c.CMMN_CODE_NAME1 as DEPT_NM,
		    a.empl_nm,
		    a.empl_id,
		    a.empl_email,
		    a.empl_telno,
		    a.EMPL_PROFL_PHOTO
		FROM
		    employee a, class_of_position b, COMM_CODE c
		where
		    enabled= '1' and a.clsf_code = b.clsf_code and a.DEPT_CODE = c.CMMN_CODE
		ORDER BY
		    a.DEPT_CODE ASC,
		    a.clsf_code DESC
	</select>
	
	<sql id="emplSearch">
		<if test="searchType != null and searchType == 'all'">
			and (
		        e.empl_nm LIKE '%'||#{searchWord}||'%'
		        OR c.CMMN_CODE_NAME1 LIKE '%'||#{searchWord}||'%'
		    	)
		</if>
	</sql>
	
	<!-- 이용상태에 따른 사원 리스트 -->
	<select id="selectEmplList" parameterType="pagingVO" resultMap="employeeMap">
		select
			b.*
		from(
			select	
				a.*, row_number() over (order by empl_no desc) rnum
			from(
				select
					e.empl_no, e.clsf_code, d.clsf_nm as clsf_nm, e.dept_code, c.cmmn_code_name1 as dept_nm, empl_nm, empl_id, empl_password,
					empl_zip, empl_adres, empl_adres2, empl_email, empl_telno,
					empl_ihidnum, empl_profl_photo, empl_sign, enabled,
					empl_encpn, e.rgsde, e.register, e.updde, e.updusr
				from employee e
				left join comm_code c on (e.dept_code = c.cmmn_code)
				left join class_of_position d on (e.clsf_code = d.clsf_code)
   				WHERE e.enabled = #{enabled}
		 		<include refid="emplSearch"/>
<!-- 				order by e.empl_no desc -->
			) a
		) b
		<![CDATA[
		where b.rnum >= #{startRow} and b.rnum <= #{endRow}
		]]>

	</select>
	
	<!-- 이용상태에 따른 사원의 명수  -->
	<select id="emplListCount" parameterType="pagingVO" resultType="int">
		SELECT COUNT(*) AS record_count
		FROM employee e
		LEFT JOIN comm_code c ON e.dept_code = c.cmmn_code
		LEFT JOIN class_of_position d ON e.clsf_code = d.clsf_code
		WHERE e.enabled = #{enabled}
		<include refid="emplSearch"/>
	</select>
	
	<!-- 해당 사원의 권한 리스트 -->
	<select id="selectAuthList" parameterType="int" resultMap="empAuthorityMap">
	SELECT
	    author_no
	  , empl_no
	  , author_nm
	  , use_yn
	  , rgsde
	  , register
	  , updde
	  , updusr
	FROM
	    emp_authority
	WHERE
		empl_no = #{emplNo}
	</select>
	
	<select id="selectDeptEmpl" parameterType="string" resultType="employeeVO">
		SELECT
		    a.empl_no,
		    a.clsf_code,
		    b.clsf_nm,
		    a.dept_code,
		    a.empl_nm,
		    a.empl_id,
		    a.empl_email,
		    a.empl_telno,
		    a.EMPL_PROFL_PHOTO
		FROM
		    employee a, class_of_position b
		where
		    enabled= '1' and a.clsf_code = b.clsf_code
		    and a.dept_code = #{deptCode}
		order by a.clsf_code desc
	</select>
	
	<select id="selectEstbsByEmplNo" parameterType="employeeEstbsVO" resultType="employeeEstbsVO">
		select 
			estbs_no
			, empl_no
			, estbs_type_code
			, estbs_cn
		from employee_estbs
		where empl_no = #{emplNo}
		and estbs_type_code = #{estbsTypeCode}	
	</select>
	
	<!-- 뉴스 키워드 인서트 -->
	<insert id="insertNewsKeyword" parameterType="employeeEstbsVO" useGeneratedKeys="true">
		<selectKey resultType="int" keyProperty="estbsNo" order="BEFORE">
        	SELECT SEQ_EMPLOYEE_ESTBS.nextval FROM dual
    	</selectKey>
			INSERT INTO employee_estbs (
			    estbs_no
			    , empl_no
			    , estbs_type_code
			    , estbs_cn
			    , estbs_rgdde
			    , estbs_register
			) VALUES (
			    SEQ_EMPLOYEE_ESTBS.nextval
			  , #{emplNo}
			  , #{estbsTypeCode}
			  , #{estbsCn}
			  , sysdate
			  , #{emplNo}   --로그인한 상태의 사람의 empl_no를 가져온다
			)
	</insert>
	<!-- 키워드 업데이트 -->
	<update id="updateNewsKeyword" parameterType="employeeEstbsVO">
		UPDATE employee_estbs
		SET
		    estbs_cn = #{estbsCn}
		    ,estbs_updde = sysdate
		    ,estbs_updusr = #{emplNo}
		WHERE
		    estbs_no = #{estbsNo}

	</update>
	
	
</mapper>