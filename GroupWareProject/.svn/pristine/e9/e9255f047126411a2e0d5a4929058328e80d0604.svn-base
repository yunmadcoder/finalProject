package kr.or.ddit.groupware.controller.attendance;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.temporal.TemporalAdjusters;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.groupware.service.attendance.IAttendanceService;
import kr.or.ddit.groupware.service.employee.IEmployeeService;
import kr.or.ddit.groupware.vo.DclzStatusVO;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.PaginationInfoVO;

/**
 * 근태통계 컨트롤러
 * 
 * @author <strong>최소희</strong>
 * @version 1.0
 * @see StatisticsController
 */
@Controller
@RequestMapping("/admin/attendance")
public class StatisticsController {

	@Inject
	private IAttendanceService service;

	@Inject
	private IEmployeeService employeeService;
	
	@Inject
	private AttendanceController attendanceController;

	// 해당 월의 1일부터 마지막날짜의 리스트(마지막날부터 저장)
	public List<Date> getDateList(int year, int month) {

		LocalDate currentFirst = LocalDate.of(year, month, 1);
		Date firstDay = Date.from(currentFirst.atStartOfDay(ZoneId.systemDefault()).toInstant());

		LocalDate today = LocalDate.now();
		LocalDate currentLast = LocalDate.of(year, month, currentFirst.lengthOfMonth());
		Date lastDay = null;

		if (today.compareTo(currentLast) < 0) {
			lastDay = Date.from(today.atStartOfDay(ZoneId.systemDefault()).toInstant());
		}
		else {
			lastDay = Date.from(currentLast.atStartOfDay(ZoneId.systemDefault()).toInstant());
		}

		List<Date> dateList = new ArrayList<>();
		while (!lastDay.before(firstDay)) {
			dateList.add(lastDay);
			LocalDate lastDayL = lastDay.toInstant().atZone(ZoneId.systemDefault()).toLocalDate().minusDays(1);
			lastDay = Date.from(lastDayL.atStartOfDay(ZoneId.systemDefault()).toInstant());
		}
		return dateList;
	}

	@PreAuthorize("hasAnyRole('ROLE_ADMIN')")
	@GetMapping(value = "/statistics")
	public String statistics(Integer year, Integer month, Model model) {

		DclzStatusVO dclzStatusVO = new DclzStatusVO();

		if (year == null || year == 0) {
			year = LocalDate.now().getYear();
		}
		if (month == null || month == 0) {
			month = LocalDate.now().getMonthValue();
		}

		LocalDate currentFirst = LocalDate.of(year, month, 1);
		LocalDate currentLast = LocalDate.of(year, month, currentFirst.lengthOfMonth()).plusDays(1);

		dclzStatusVO.setFirstDay(currentFirst);
		dclzStatusVO.setLastDay(currentLast);

		List<Date> dateList = getDateList(year, month);
		List<EmployeeVO> employeeList = employeeService.selectEmplListStatics();

		List<DclzStatusVO> allDataList = new ArrayList<DclzStatusVO>();
		
		// 날짜와 사원정보 넣기
		for (Date date : dateList) {
			for (EmployeeVO employeeVO : employeeList) {
				DclzStatusVO dsVO = new DclzStatusVO();
				dsVO.setDate(date);
				dsVO.setEmplNo(employeeVO.getEmplNo());
				dsVO.setEmplNm(employeeVO.getEmplNm());
				dsVO.setDeptNm(employeeVO.getDeptNm());
				dsVO.setClsfNm(employeeVO.getClassOfPositionVO().getClsfNm());
				allDataList.add(dsVO);
			}
		}

		List<DclzStatusVO> dclzStatusList = service.selectDclzList(dclzStatusVO); // emplNo 안 넣으면 모든 데이터

		// 보여질 모든 날짜와 테이블 합치기
		for (DclzStatusVO dsVO : allDataList) {
			for (DclzStatusVO dsVO2 : dclzStatusList) {
				LocalDate dsVODate = dsVO.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
				LocalDate dsVO2Date = dsVO2.getAttendDt().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
				if (dsVO2.getEmplNo() != 0 && dsVO.getEmplNo() == dsVO2.getEmplNo() && dsVO2.getAttendDt() != null
						&& dsVODate.equals(dsVO2Date)) {
					dsVO.setDclzNo(dsVO2.getDclzNo());
					dsVO.setEmplNo(dsVO2.getEmplNo());
					dsVO.setAttendDt(dsVO2.getAttendDt());
					dsVO.setLvffcDt(dsVO2.getLvffcDt());
					dsVO.setDclzPartclrNo(dsVO2.getDclzPartclrNo());
					dsVO.setBeginDt(dsVO2.getBeginDt());
					dsVO.setEndDt(dsVO2.getEndDt());
					dsVO.setDclzTypeCode(dsVO2.getDclzTypeCode());
					dsVO.setDclzNm(dsVO2.getDclzNm());
				}
			}
		}

		// 기본근무시간, 연장근무시간, 야근근무시간 구하기
		for (DclzStatusVO dsVO : allDataList) {
			if (dsVO.getAttendDt() != null) {
				LocalTime lvffcDt = dsVO.getLvffcDt().toInstant().atZone(ZoneId.systemDefault()).toLocalTime();
				LocalTime attendDt = dsVO.getAttendDt().toInstant().atZone(ZoneId.systemDefault()).toLocalTime();
				LocalTime sixPM = LocalTime.of(18, 0, 0);
				LocalTime tenPM = LocalTime.of(22, 0, 0);

				// 차이를 0h 0m 0s 형식으로 포맷팅
				// 기본 근무
				String defaultTime = attendanceController.getHMS(attendDt, lvffcDt);
				// 연장 근무
				String overTime = attendanceController.getHMS(sixPM, lvffcDt);
				// 야간 근무
				String nightTime = attendanceController.getHMS(tenPM, lvffcDt);
				
				dsVO.setDefaultTime(defaultTime);
				dsVO.setOverTime(overTime);
				dsVO.setNightTime(nightTime);
				
				// 휴일 근무
				LocalDate lvffcDt_LD = dsVO.getLvffcDt().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
				DayOfWeek dayOfWeek = lvffcDt_LD.getDayOfWeek();

		        if (dayOfWeek == DayOfWeek.SATURDAY || dayOfWeek == DayOfWeek.SUNDAY) {
		        	dsVO.setHolidayTime(defaultTime);
		        }
			}
		}
		
		int attendanceUnchecked = 0;
		int departureUnchecked = 0;
		int tardiness = 0;
		int earlyDeparture = 0;
		int absence = 0;
		int businessTrip = 0;
		int fieldWork = 0;
		int vacation = 0;
		
		
		for (DclzStatusVO dsVO : allDataList) {
			
			LocalTime nineAM = LocalTime.of(9, 0); // 오전 9시
			LocalTime sixPM = LocalTime.of(18, 0); // 오후 6시
			
			if(dsVO.getAttendDt() == null || dsVO.getAttendDt().equals("")) {
				attendanceUnchecked++;
			}
			if(dsVO.getLvffcDt() == null || dsVO.getLvffcDt().equals("")) {
				departureUnchecked++;
			}
			if(dsVO.getAttendDt() != null && !dsVO.getAttendDt().equals("")) {
				LocalTime attendDt = dsVO.getAttendDt().toInstant().atZone(ZoneId.systemDefault()).toLocalTime();
				if (attendDt.isAfter(nineAM)) {
					tardiness++;
				}
			}
			if(dsVO.getLvffcDt() != null && !dsVO.getLvffcDt().equals("")) {
				LocalTime lvffcDt = dsVO.getLvffcDt().toInstant().atZone(ZoneId.systemDefault()).toLocalTime();
				if(lvffcDt.isBefore(sixPM)) {
					earlyDeparture++;
				}
			}
			if((dsVO.getAttendDt() == null || dsVO.getAttendDt().equals("")) && (dsVO.getDeptNm() == null || dsVO.getDeptNm().equals(""))) {
				absence++;
			}
			if(dsVO.getDeptNm() == "출장") {
				businessTrip++;
			}
			if(dsVO.getDeptNm() == "외근") {
				fieldWork++;
			}
			if(dsVO.getDeptNm() == "휴가") {
				vacation++;
			}
		}
		
		model.addAttribute("year", year);
		model.addAttribute("month", String.format("%02d", month));

		model.addAttribute("allDataList", allDataList);
		
		model.addAttribute("attendanceUnchecked", attendanceUnchecked);
		model.addAttribute("departureUnchecked", departureUnchecked);
		model.addAttribute("tardiness", tardiness);
		model.addAttribute("earlyDeparture", earlyDeparture);
		model.addAttribute("absence", absence);
		model.addAttribute("businessTrip", businessTrip);
		model.addAttribute("fieldWork", fieldWork);
		model.addAttribute("vacation", vacation);
		
		return "admin/attendance/attendanceStatistics";
	}
}
