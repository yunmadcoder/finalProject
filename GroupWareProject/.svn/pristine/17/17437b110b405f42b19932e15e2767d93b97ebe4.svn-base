package kr.or.ddit.groupware.controller.rental;


import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.groupware.service.rental.IRentalService;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.PaginationInfoVO;
import kr.or.ddit.groupware.vo.RentalVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/admin/rental")
public class RentalManageController {

	@Inject
	private IRentalService rentalService;
	
	
	@PreAuthorize("hasAnyRole('ROLE_ADMIN')")
	@GetMapping("/returnList")
	public String returnList() {
		
		return "admin/rental/returnList";
	}
	
	/**
	 * 승인신청리스트조회
	 * 
	 * @param currentPage 현재 페이지 번호 (기본값 1)
	 * @param searchWord 검색어
	 * @param model 
	 * @return "myReservation/rentalList";
	 */
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/approval", produces = MediaType.APPLICATION_JSON_VALUE, method = {RequestMethod.GET, RequestMethod.POST})
	public String rentList(
			@RequestParam(name = "page", required = false, defaultValue = "1")int currentPage,
			@RequestParam(required = false)String searchWord, String type,
			Model model) {
		//사원번호가져오기
		CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		EmployeeVO employeeVO = customUser.getEmployeeVO();
		int emplNo = employeeVO.getEmplNo(); 
		
		PaginationInfoVO<RentalVO> pagingVO = new PaginationInfoVO<RentalVO>();
		pagingVO.setEmplNo(emplNo);
		
//		검색결과가 존재하면
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchWord",searchWord);
		}
		
//		페이지 설정
		pagingVO.setCurrentPage(currentPage);
//		총 예약내역
		int totalRecord = rentalService.selectRentalCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		
		List<RentalVO> dataList = rentalService.selectRentalList(pagingVO);
		pagingVO.setDataList(dataList);
		
		
		model.addAttribute("pagingVO", pagingVO);
		
		return "admin/rental/approval";
	
	}
	
	@PostMapping("/approveRental")
	@ResponseBody
	public ResponseEntity<?> approveRental(@RequestParam("erntNo") int erntNo) {
	    Result result = rentalService.approveRental(erntNo);
	    if (result == Result.OK) {
	        return ResponseEntity.ok("Approval successful");
	    } else {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to approve rental");
	    }
	}
	
	@PostMapping("/rejectRental")
	@ResponseBody
	public ResponseEntity<?> rejectRental(@RequestParam("erntNo") int erntNo) {
	    Result result = rentalService.rejectRental(erntNo);
	    if (result == Result.OK) {
	        return ResponseEntity.ok("Approval successful");
	    } else {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to approve rental");
	    }
	}
	

}
