package kr.or.ddit.groupware.service.approval;

import java.sql.SQLException;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.apache.ibatis.exceptions.PersistenceException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.groupware.mapper.approval.IApprovalMapper;
import kr.or.ddit.groupware.mapper.notification.INotificationMapper;
import kr.or.ddit.groupware.util.FileUtil;
import kr.or.ddit.groupware.util.NotificationUtil;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.util.TableCode;
import kr.or.ddit.groupware.vo.ApprovalRfrncVO;
import kr.or.ddit.groupware.vo.ApprovalVO;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.NotificationVO;
import kr.or.ddit.groupware.vo.OrganizationTreeVO;
import kr.or.ddit.groupware.vo.SanctionerBookmarkGroupVO;
import kr.or.ddit.groupware.vo.SanctionerBookmarkRefVO;
import kr.or.ddit.groupware.vo.SanctionerBookmarkVO;
import kr.or.ddit.groupware.vo.SanctionerVO;

/**
 * 전자 결재 서비스 구현체
 * 
 * @author <strong>이명문</strong>
 * @version 1.0
 * @see ApprovalServiceImpl
 */
@Service
public class ApprovalServiceImpl implements IApprovalService {

	@Inject
	private IApprovalMapper approvalMapper;
	
	@Inject
	private INotificationMapper notificationMapper;

	@Inject
	private FileUtil fileUtil;
	
	@Inject
	private NotificationUtil noti;

	@Override
	public List<ApprovalVO> selectDraftList(ApprovalVO approvalVO) {
		if(approvalVO.getType().equals("approve")) {
			return approvalMapper.selectApproveList(approvalVO);
		}
		return approvalMapper.selectDraftList(approvalVO);
	}

	@Override
	public List<OrganizationTreeVO> selectOragnTree() {
		return approvalMapper.selectOragnTree();
	}

	@Override
	public int insertSanctionerGroup(SanctionerBookmarkGroupVO vo) {
		return approvalMapper.insertSanctionerGroup(vo);
	}

	@Override
	@Transactional(rollbackFor = SQLException.class)
	public Result insertSanctioner(SanctionerBookmarkVO[] bookmarkList) {

		int cnt = 0;
		for (SanctionerBookmarkVO sanctionerBookmarkVO : bookmarkList) {
			cnt = approvalMapper.insertSanctioner(sanctionerBookmarkVO);
			if (cnt <= 0) {
				throw new RuntimeException();
			}
		}

		if (cnt > 0) return Result.OK;

		return Result.FAILED;
	}

	@Override
	@Transactional(rollbackFor = SQLException.class)
	public Result insertReferencer(SanctionerBookmarkRefVO[] refList) {

		int cnt = 0;

		for (SanctionerBookmarkRefVO sanctionerBookmarkRefVO : refList) {
			cnt = approvalMapper.insertReferencer(sanctionerBookmarkRefVO);
			if (cnt <= 0) {
				throw new RuntimeException();
			}
		}

		if (cnt > 0) return Result.OK;

		return Result.FAILED;
	}

	@Override
	public List<SanctionerBookmarkGroupVO> selectMyLine(SanctionerBookmarkGroupVO vo) {
		return approvalMapper.selectMyLine(vo);
	}

	@Override
	public List<SanctionerBookmarkGroupVO> selectMyGroup(SanctionerBookmarkGroupVO vo) {
		return approvalMapper.selectMyGroup(vo);
	}

	@Transactional(rollbackFor = {
			Exception.class
	})
	@Override
	public int insertApproval(ApprovalVO approvalVO) {
		List<MultipartFile> files = approvalVO.getFiles();

		if (files != null) {
			int atchFileGroupNo = fileUtil.saveUploadFile(files, TableCode.DRAFT);
			approvalVO.setAtchFileGroupNo(atchFileGroupNo);
		}

		int result = approvalMapper.insertApproval(approvalVO);

		List<SanctionerVO> sanctionerList = approvalVO.getSanctionerList();
		if(sanctionerList != null && sanctionerList.size() > 0) {
			for (SanctionerVO sanctionerVO : sanctionerList) {
				sanctionerVO.setAprovlNo(approvalVO.getAprovlNo());
				approvalMapper.insertSanctioners(sanctionerVO);
			}
			
		}

		List<ApprovalRfrncVO> rfrncList = approvalVO.getRfrncList();
		if (rfrncList != null && rfrncList.size() > 0) {
			for (ApprovalRfrncVO approvalRfrncVO : rfrncList) {
				approvalRfrncVO.setAprovlNo(approvalVO.getAprovlNo());
				approvalMapper.insertApprovalRfrnc(approvalRfrncVO);
			}
		}

		ApprovalVO apVO = selectApprovalDocument(approvalVO.getAprovlNo());
		List<SanctionerVO> sanList = apVO.getSanctionerList();
		
		NotificationVO notificationVO = new NotificationVO();
		
		if(sanList != null && sanList.size() > 0) {
			System.out.println("직급 왜 안나옴 ? => " + apVO.getAprovlClsfNm());
			for (SanctionerVO sanVO : sanList) {
				
				String content = "[결재 도착] "
						.concat(apVO.getEmplNm() + " " + apVO.getAprovlClsfNm())
						.concat("'님이 작성한 '")
						.concat(apVO.getAprovlNm() + "' 이(가) 도착했습니다!");
				notificationVO.setNtcnRecp(sanVO.getApproverNo());
				notificationVO.setNtcnTypeCode("N101");
				notificationVO.setNtcnContent(content);
				notificationVO.setNtcnUrl("/approval/document/"+sanVO.getAprovlNo());
				notificationVO.setLocalDt(ZonedDateTime.now(ZoneId.of("Asia/Seoul")).toLocalDateTime());
				// LocalDateTime.of(2024, 4, 25, 10, 30); 날짜 지정 or
				// LocalDateTime.now() / now.withHour(12).withMinute(0); // 12시 0분 시간 지정 => 2024, 4 , 25, 12, 0
				// LocalDateTime future = now.PlusDays(7).plusHours(3); // 현재 날짜에서 7일 3시간 더함.
				
				notificationMapper.insertNotification(notificationVO);
				noti.sendNoti(sanVO.getApproverNo());
			}
		}
		
		List<ApprovalRfrncVO> rfList = apVO.getRfrncList();
		if(rfList != null && rfList.size() > 0) {
			
			for (ApprovalRfrncVO rfVO : rfList) {
				String content = "[참조 도착] "
						.concat(apVO.getEmplNm() + " " +apVO.getAprovlClsfNm() )
						.concat("'님이 작성한 '")
						.concat(apVO.getAprovlNm() + "' 이(가) 도착했습니다!");
				
				notificationVO.setNtcnRecp(rfVO.getRfrncerNo());
				notificationVO.setNtcnTypeCode("N105");
				notificationVO.setNtcnContent(content);
				notificationVO.setNtcnUrl("/approval/document/"+rfVO.getAprovlNo());
				notificationVO.setLocalDt(ZonedDateTime.now(ZoneId.of("Asia/Seoul")).toLocalDateTime());
				
				notificationMapper.insertNotification(notificationVO);
				noti.sendNoti(rfVO.getRfrncerNo());
			}
		}
		
		if (result > 0) return approvalVO.getAprovlNo();

		return 0;
	}

	@Transactional(rollbackFor = {
			Exception.class
	})
	@Override
	public Result deleteMyLine(SanctionerBookmarkGroupVO vo) {
		int result = approvalMapper.deleteMyLine(vo);

		if (result <= 0) throw new RuntimeException();

		result = approvalMapper.deleteMyLineGroup(vo);

		if (result <= 0) throw new RuntimeException();

		return Result.OK;
	}

	@Transactional(rollbackFor = {
			Exception.class
	})
	@Override
	public Result deleteMyGroup(SanctionerBookmarkGroupVO vo) {
		int result = approvalMapper.deleteMyGroup(vo);

		if (result <= 0) throw new RuntimeException();

		result = approvalMapper.deleteMyLineGroup(vo);

		if (result <= 0) throw new RuntimeException();

		return Result.OK;
	}

	@Override
	public ApprovalVO selectApprovalDocument(int aprovlNo) {
		ApprovalVO approvalVO = approvalMapper.selectApprovalDocument(aprovlNo);
		List<ApprovalRfrncVO> rfrncList = approvalMapper.selectApprovalRfrncer(aprovlNo);
		if (rfrncList != null && rfrncList.size() > 0) {
			CustomUser user = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();

			for (ApprovalRfrncVO approvalRfrncVO : rfrncList) {
				if (user.getEmployeeVO().getEmplNo() == approvalRfrncVO.getRfrncerNo()
						&& approvalRfrncVO.getRfrncConfirmDt() == null) {
					approvalMapper.readRfrncDocument(approvalRfrncVO);
					break;
				}
			}

			approvalVO.setRfrncList(rfrncList);
		}

		return approvalVO;
	}

	@Override
	public List<ApprovalVO> selectApprovalList(SanctionerVO sanctionerVO) {
		return approvalMapper.selectApprovalList(sanctionerVO);
	}

	@Transactional(rollbackFor = Exception.class)
	@Override
	public Result confirmApproval(SanctionerVO sanctionerVO) {
		
		int result = approvalMapper.confirmApproval(sanctionerVO);
		String code = sanctionerVO.getSanctnerSttusCode();
		
		if(code.equals("G307")) {
			approvalMapper.approvalArbitrary(sanctionerVO);
			approvalMapper.finishApprovalDocument(sanctionerVO.getAprovlNo());
			
			return Result.OK;
		}else {
			
			if (result > 0) {
				int update = approvalMapper.nextApprovalUpdate(sanctionerVO);
	
				if (update == 0) {
					approvalMapper.finishApprovalDocument(sanctionerVO.getAprovlNo());
				}
	
				return Result.OK;
			}
		}

		return Result.FAILED;
	}

	@Transactional(rollbackFor = Exception.class)
	@Override
	public Result returnApproval(Map<String, String> param) {

		int result = 0;
		int cnt = approvalMapper.returnSanctioner(param);

		if (cnt > 0) {
			result = approvalMapper.returnApproval(param);
		}

		if (result > 0) {
			approvalMapper.allApprovalCancel(param);
			return Result.OK;
		}

		return Result.FAILED;
	}

	@Transactional(rollbackFor = Exception.class)
	@Override
	public Result holdSanctioner(Map<String, String> param) {
		int result = approvalMapper.holdSanctioner(param);
		if (result > 0) return Result.OK;

		return Result.FAILED;
	}

	@Transactional(rollbackFor = {Exception.class, PersistenceException.class})
	@Override
	public int reapplyApproval(ApprovalVO approvalVO) {

		List<MultipartFile> files = approvalVO.getFiles();
		
		if (files != null) {
			int deleteFileGroupNo = approvalVO.getAtchFileGroupNo();
			fileUtil.fileGroupDelete(deleteFileGroupNo);
			fileUtil.updateSaveFile(files, deleteFileGroupNo, TableCode.DRAFT);
		}

		int result = approvalMapper.reapplyApproval(approvalVO);

		List<SanctionerVO> sanctionerList = approvalVO.getSanctionerList();
		if(sanctionerList != null && sanctionerList.size() > 0) {
			approvalMapper.deleteSanctioner(approvalVO.getAprovlNo());
		
			for (SanctionerVO sanctionerVO : sanctionerList) {
				if(sanctionerVO.getApproverNo() != 0) {
					sanctionerVO.setAprovlNo(approvalVO.getAprovlNo());
					approvalMapper.insertSanctioners(sanctionerVO);
					String content = String.join("[결재 도착] '",sanctionerVO.getApproverNm(),"'님이 작성한 '",sanctionerVO.getApproverNm(),"'이(가) 도착했습니다.");
					NotificationVO notificationVO = new NotificationVO();
					notificationVO.setNtcnRecp(sanctionerVO.getApproverNo());
					notificationVO.setNtcnContent(content);
					notificationVO.setNtcnUrl("/approval/document/"+sanctionerVO.getAprovlNo());
					notificationVO.setLocalDt(ZonedDateTime.now(ZoneId.of("Asia/Seoul")).toLocalDateTime());
					
					notificationMapper.insertNotification(notificationVO);
				}
			}
		}

		List<ApprovalRfrncVO> rfrncList = approvalVO.getRfrncList();
		
		if (rfrncList != null && rfrncList.size() > 0) {
			approvalMapper.deleteReferencer(approvalVO.getAprovlNo());
			
			for (ApprovalRfrncVO approvalRfrncVO : rfrncList) {
				if(approvalRfrncVO.getAprovlRfrncNo() != 0) {
					approvalRfrncVO.setAprovlNo(approvalVO.getAprovlNo());
					approvalMapper.insertApprovalRfrnc(approvalRfrncVO);
				}
			}
		}

		if (result > 0) return approvalVO.getAprovlNo();

		return 0;
	}

	@Override
	public Result cancelApprovalDraft(int aprovlNo) {
		approvalMapper.deleteReferencer(aprovlNo);
		approvalMapper.deleteSanctioner(aprovlNo);
		int result = approvalMapper.cancelApprovalDraft(aprovlNo);
		
		if(result > 0) return Result.OK;
		
		return Result.FAILED;
	}

	@Transactional(rollbackFor = {Exception.class, PersistenceException.class})
	@Override
	public Result cancelApproval(SanctionerVO sanctionerVO) {
		
		int result = approvalMapper.cancelApproval(sanctionerVO);
		approvalMapper.nextApprovalStatusUpdate(sanctionerVO);
		
		if(result > 0) return Result.OK;
		
		return Result.FAILED;
	}

	@Override
	public List<ApprovalVO> selectMainApproval(ApprovalVO approvalVO) {
		return approvalMapper.selectMainApproval(approvalVO);
	}

	@Override
	public List<ApprovalVO> selectMainInprogress(ApprovalVO approvalVO) {
		return approvalMapper.selectMainInprogress(approvalVO);
	}

	@Override
	public List<ApprovalVO> selectMainComplete(ApprovalVO approvalVO) {
		return approvalMapper.selectMainComplete(approvalVO);
	}

	@Override
	public List<Map<String, Object>> myDocumentsCount(int emplNo) {
		List<Map<String,Object>> list = approvalMapper.myDocumentsCount(emplNo);
		return list;
	}

}
