package kr.or.ddit.groupware.controller.rental;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.groupware.service.rental.IRentalService;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.RentalVO;
import lombok.extern.slf4j.Slf4j;
/**
 * 대여 컨트롤러
 * 
 * @author <strong>민경선</strong>
 * @version 1.0
 * @see RentalController
 */

@Controller
@RequestMapping("/")
@Slf4j
public class RentalController {
		/**
		 * 차량대여하기
		 * @method : rentVehicle
		 * @auther : <strong>민경선</strong>
		 * @param  : rentalVO 
		 * @return : response entity 
		 */	
		@Autowired
		private IRentalService rentalService;
		
		
		@PreAuthorize("hasRole('ROLE_MEMBER')")
		@PostMapping("/addVehicleReservation")
		public ResponseEntity<String> rentVehicle(@RequestBody RentalVO rentalVO) {
			CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			EmployeeVO employeeVO = customUser.getEmployeeVO();

			rentalVO.setEmplNo(employeeVO.getEmplNo());

			Result result = rentalService.RentVehicle(rentalVO);

			if (result.equals(Result.OK)) {
				return new ResponseEntity<String>("success", HttpStatus.OK);
			}
			else {
				return new ResponseEntity<String>("failed", HttpStatus.OK);
			}

		}
		/**
		 * 비품대여하기
		 * @method : rentSupplies
		 * @auther : <strong>민경선</strong>
		 * @param  : rentalVO 
		 * @return : response entity 
		 */	
		@PreAuthorize("hasRole('ROLE_MEMBER')")
		@PostMapping("/addSuppliesReservation")
		public ResponseEntity<String> rentSupplies(@RequestBody RentalVO rentalVO) {
			CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			EmployeeVO employeeVO = customUser.getEmployeeVO();

			rentalVO.setEmplNo(employeeVO.getEmplNo());
		    
			if ( rentalService.updateStock(rentalVO)) {
		        Result result = rentalService.RentSupplies(rentalVO);
		        
		        log.info("result", result);
		        if (result.equals(Result.OK)) {
		            return new ResponseEntity<String>("success", HttpStatus.OK);
		        }
		        return new ResponseEntity<String>("failed", HttpStatus.INTERNAL_SERVER_ERROR);
		    } else {
		        return new ResponseEntity<String>("Not enough stock available", HttpStatus.CONFLICT);
		    }
		}
		/**
		 * 대여가능 여부 체크 
		 * @auther : <strong>민경선</strong>
		 * @param  : rentalVO 
		 * @return : response entity
		 */		
		@PreAuthorize("hasRole('ROLE_MEMBER')")
		@PostMapping(value = "/rental/check", produces = "text/plain; charset=UTF-8")
		public ResponseEntity<String> checkRental(@RequestBody RentalVO rentalVO) {
		    if (rentalService.isRentalPossible(rentalVO)) {
		        return ResponseEntity.ok("예약이가능합니다.");
		    } else {
		        return ResponseEntity.badRequest().body("이미 예약되었습니다.");
		    }
		}
		/**
		 * 차량대여삭제
		 * @auther : <strong>민경선</strong>
		 * @param  : rentalVO 
		 * @return : response entity
		 */	
	  @PreAuthorize("hasRole('ROLE_MEMBER')")
	  @PostMapping(value = "/deleteRentalVehicle" , produces = "text/plain; charset=UTF-8")
	    public ResponseEntity<?> deleteRentalVehicle(@RequestBody RentalVO rentalVO) {
	        boolean success1 = rentalService.deleteRentalVehicle(rentalVO);
	        if (success1) {
	            return ResponseEntity.ok("차량 대여신청을 취소하시겠습니까?");
	        } else {
	            return ResponseEntity.badRequest().body("Failed to delete car rental");
	        }
	    }
	  /**
		 * 비품대여삭제
		 * @auther : <strong>민경선</strong>
		 * @param  : rentalVO 
		 * @return : response entity
		 */
	  @PreAuthorize("hasRole('ROLE_MEMBER')")
	  @PostMapping(value = "/deleteRentalSupplies" , produces = "text/plain; charset=UTF-8")
	    public ResponseEntity<?> deleteRentalSupplies(@RequestBody RentalVO rentalVO) {
	        boolean success = rentalService.deleteRentalSupplies(rentalVO);
	        log.info("rentalVO나옴?" + rentalVO);
	        if (success) {
	            return ResponseEntity.ok("비품 대여신청을 취소하시겠습니까?");
	        } else {
	            return ResponseEntity.badRequest().body("Failed to delete supplies rental");
	        }
	    }
	  
	  @PreAuthorize("hasRole('ROLE_MEMBER')")
	  @GetMapping(value = "/checkStock", produces = "text/plain; charset=UTF-8" )
	    public ResponseEntity<?> checkStockAvailability(@RequestParam String eqpnmCd, @RequestParam int erntQy) {
	        try {
	            if (rentalService.checkStockAvailability(eqpnmCd, erntQy)) {
	                return ResponseEntity.ok().body("{\"message\": \"재고가 충분합니다.\"}");
	            } else {
	                return ResponseEntity.ok().body("{\"message\": \"재고가 부족합니다.\"}");
	            }
	        } catch (IllegalArgumentException e) {
	            return ResponseEntity.badRequest().body("{\"message\": \"" + e.getMessage() + "\"}");
	        }
	    }
	}

