package kr.or.ddit.groupware.controller.common;

import java.io.File;
import java.util.List;

import javax.inject.Inject;

import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.or.ddit.groupware.service.attach.IAttachFileService;
import kr.or.ddit.groupware.service.notification.INotificationService;
import kr.or.ddit.groupware.service.widget.IWidgetService;
import kr.or.ddit.groupware.util.FileUtil;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.util.TableCode;
import kr.or.ddit.groupware.vo.AttachFileGroupVO;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.NotificationVO;
import kr.or.ddit.groupware.vo.WidgetVO;

/**
 * 메인 컨트롤러
 * 
 * @author <strong>이명문</strong>
 * @version 1.0
 * @see MainController
 */

@Controller
@RequestMapping("/")
public class MainController {

	@Inject
	private FileUtil fileUtil;

	@Inject
	private IAttachFileService attachFileService;
	
	@Inject
	private IWidgetService widgetService;
	
	@Inject
	private INotificationService notiService;
	
	private ObjectMapper mapper = new ObjectMapper();

	@PreAuthorize("hasAnyRole('ROLE_MEMBER', 'ROLE_ADMIN')")
	@GetMapping("")
	public String testView(Model model) throws Exception {
		CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		EmployeeVO employeeVO = customUser.getEmployeeVO();
		List<WidgetVO> widgetList = widgetService.selectWidgetList(employeeVO.getEmplNo());
		
		if(widgetList != null) {
			model.addAttribute("widgetList", mapper.writeValueAsString(widgetList));
			model.addAttribute("employee", employeeVO);
		}
		
		return "main/main";
	}

	@GetMapping("/upload")
	public String upload(Model model) {
		AttachFileGroupVO attachFileGroupVO = attachFileService.getAttachFileGroup(9);
		model.addAttribute("attachFileGroup", attachFileGroupVO);
		return "main/upload";
	}

	@PostMapping("/upload")
	public ResponseEntity<Result> uploadPost(List<MultipartFile> files) {
		fileUtil.saveUploadFile(files, TableCode.BOARD);
		return ResponseEntity.ok(Result.OK);
	}

	@GetMapping("/uploadedFiles")
	public ResponseEntity<String> uploadedFiles() {
		ObjectMapper mapper = new ObjectMapper();
		AttachFileGroupVO attachFileGroupVO = attachFileService.getAttachFileGroup(9);
		String fileData = "";
		try {
			fileData = mapper.writeValueAsString(attachFileGroupVO);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}

		return ResponseEntity.ok(fileData);
	}

	@GetMapping("/download")
	public ResponseEntity<byte[]> downloadFile(String path) {
		ResponseEntity<byte[]> entity = null;
		File file = new File(path);

		if (file.exists()) {
			entity = fileUtil.getFileEntity(path, true);
		}

		return entity;
	}

	@RequestMapping("/calendar")
	public String calendar() {
		return "main/calendar";
	}

	@RequestMapping("/kanban")
	public String kanban() {
		return "main/kanban";
	}

	@RequestMapping("/email")
	public String email() {
		return "main/email";
	}

	@RequestMapping("/addresstable")
	public String contactTable() {
		return "main/addressTable";
	}

	@RequestMapping("/addressbook")
	public String contactList() {
		return "main/addressList";
	}

	@RequestMapping("/profile")
	public String profile() {
		return "main/profile";
	}
	
	/**
	 * @method : notiView
	 * @auther : <strong>이명문</strong>
	 * @param  : model - 값을 담아 전달해줄 모델
	 * @param  : type - 파라미터 값으로 어떠한 리스트를 가져올지 분기처리 
	 * @return : "main/notification"
	 * @date : 2024. 4. 15
	 */
	@GetMapping("/noti")
	public String notiView(Model model, String type) {
		CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		NotificationVO notiVO = new NotificationVO();
		notiVO.setNtcnRecp(customUser.getEmployeeVO().getEmplNo());
		
		List<NotificationVO> notiList = null;
		if(type == null || type.equals("all")) {
			notiList = notiService.selectNotiList(notiVO);
		}else if(type.equals("unread")) {
			notiList = notiService.selectNotReadNotiList(notiVO);
		}
		
		model.addAttribute("notiList", notiList);
		model.addAttribute("type", type);
		
		return "main/notification";
	}

	@RequestMapping("/reservation")
	public String reservation() {
		return "main/reservation";
	}
}
