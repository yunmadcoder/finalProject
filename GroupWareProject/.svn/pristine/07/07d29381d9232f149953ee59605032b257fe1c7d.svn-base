package kr.or.ddit.groupware.controller.reservation;

import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import kr.or.ddit.groupware.service.rental.IRentalService;
import kr.or.ddit.groupware.service.reservation.IReservationService;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.vo.CustomUser;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.MtgRoomReservVO;
import kr.or.ddit.groupware.vo.RentalVO;
import lombok.extern.slf4j.Slf4j;

	/**
	 *회의실예약 컨트롤러
	 * @author <strong>민경선</strong>
	 * @version 1.0
	 * @see ReservationController
	 */

	@Slf4j
	@Controller
	@RequestMapping("/")
	public class ReservationController {
	@Autowired
	private IReservationService reservationService;
	@Autowired
	private IRentalService rentalService;
	
	/**
	 * 예약/대여 메인페이지
	 * @auther : <strong>민경선</strong>
	 * @param  : HttpServletRequest
	 * @param  : model
	 * @return : view
	 */
	@PreAuthorize("hasRole('ROLE_MEMBER')")
    @GetMapping("/reservation")
    public String showReservationPage(HttpServletRequest request, Model model) {
       
		CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		EmployeeVO employeeVO = customUser.getEmployeeVO();

		if(employeeVO !=null) {
			model.addAttribute("user",employeeVO);
		}
		log.info("user정보", employeeVO);
        return "main/reservation";
    }
	/**
	 * 회의실예약
	 * @auther : <strong>민경선</strong>
	 * @param  : roomReservVO 
	 * @return : response entity 
	 */
	@PreAuthorize("hasRole('ROLE_MEMBER')")
	@PostMapping("/addRoomReservation")
	public ResponseEntity<String>reserveMeetingRoom(@RequestBody MtgRoomReservVO roomReservVO){
		CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		EmployeeVO employeeVO = customUser.getEmployeeVO();
		
		roomReservVO.setEmplNo(employeeVO.getEmplNo());

		
		Result result = reservationService.addRoomReserv(roomReservVO);
		
		if(result.equals(Result.OK)) {
			return new ResponseEntity<String>("success", HttpStatus.OK);
		}else {
			return new ResponseEntity<String>("failed", HttpStatus.OK);
		}
		
	}
	/**
	 * resource type(회의실/차량/비품)에 따른 예약 조회
	 * @auther : <strong>민경선</strong>
	 * @param  : resourceType 
	 * @return : response entity
	 */
	@PreAuthorize("hasRole('ROLE_MEMBER')")
	@GetMapping("/reservations/{resourceType}")
	@ResponseBody
	public ResponseEntity<?> getReservationsByResourceType(@PathVariable("resourceType") String resourceType) {
	    log.info("Fetching reservations for resourceType: {}", resourceType);
	    CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    EmployeeVO employeeVO = customUser.getEmployeeVO();

	    switch (resourceType) {
	        case "room":
	            MtgRoomReservVO roomReservVO = new MtgRoomReservVO();
	            roomReservVO.setEmplNo(employeeVO.getEmplNo());
	            roomReservVO.setResourceType(resourceType);
	            return ResponseEntity.ok(reservationService.getReservationsByResourceType(roomReservVO));
	        case "vehicle":
	            RentalVO rentalVO = new RentalVO();
	            rentalVO.setEmplNo(employeeVO.getEmplNo());
	            rentalVO.setResourceType(resourceType);
	            return ResponseEntity.ok(rentalService.getReservationsByResourceType(rentalVO));
	        case "supply":
	            RentalVO rentalVOSup = new RentalVO();
	            rentalVOSup.setEmplNo(employeeVO.getEmplNo());
	            rentalVOSup.setResourceType(resourceType);
	            return ResponseEntity.ok(rentalService.getReservationsByResourceType(rentalVOSup));    
	        default:
	            return ResponseEntity.badRequest().body("Invalid resource type");
	    }
	}
	
	/**
	 * 예약가능 여부 체크 
	 * @auther : <strong>민경선</strong>
	 * @param  : reservation (MtgRoomReservVO)
	 * @return : response entity
	 */
	@PreAuthorize("hasRole('ROLE_MEMBER')")
	@PostMapping(value = "/reservations/check", produces = "text/plain; charset=UTF-8")
	public ResponseEntity<String> checkReservation(@RequestBody MtgRoomReservVO reservation) {
	    if (reservationService.isReservationPossible(reservation)) {
	        return ResponseEntity.ok("예약이가능합니다.");
	    } else {
	        return ResponseEntity.badRequest().body("이미 예약되었습니다.");
	    }
	 
	}
	
	@PreAuthorize("hasRole('ROLE_MEMBER')")
	@PostMapping("/modifyReservation")
	public ResponseEntity<String>modifyReservation(@RequestBody MtgRoomReservVO roomReservVO){
		CustomUser customUser = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		EmployeeVO employeeVO = customUser.getEmployeeVO();
		roomReservVO.setEmplNo(employeeVO.getEmplNo());
		Result result = reservationService.modifyRoomReserv(roomReservVO);
		
		if(result.equals(Result.OK)) {
			return new ResponseEntity<String>("success", HttpStatus.OK);
		}else {
			return new ResponseEntity<String>("failed", HttpStatus.OK);
		}
		
	}
	
	

	
}
