package kr.or.ddit.groupware.util;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.groupware.service.attach.IAttachFileService;
import kr.or.ddit.groupware.vo.AttachFileVO;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class FileUtil {

	private static Map<String, MediaType> mediaMap;

	static {
		mediaMap = new HashMap<>();
		mediaMap.put("JPG", MediaType.IMAGE_JPEG);
		mediaMap.put("JPEG", MediaType.IMAGE_JPEG);
		mediaMap.put("PNG", MediaType.IMAGE_PNG);
		mediaMap.put("GIF", MediaType.IMAGE_GIF);
		mediaMap.put("PDF", MediaType.APPLICATION_PDF);
		mediaMap.put("TXT", MediaType.TEXT_PLAIN);
		mediaMap.put("XML", MediaType.TEXT_XML);
	}
	
	@Resource(name = "path")
	private String resourcePath;

	@Autowired
	private IAttachFileService attachFileService;

	public int saveUploadFile(List<MultipartFile> files, TableCode code) {
		
		 if (files == null || files.isEmpty() || files.stream().allMatch(MultipartFile::isEmpty)) {
		        return -1; // 파일이 없거나 모든 파일이 비어 있으면 -1 반환
		    }

		List<String> saveFileNames = new ArrayList<>();
		int atchFileGroupNo = 0;
		
		try {
			String savedPath = getFolderName(resourcePath, code);
			if (files != null) {
				atchFileGroupNo = attachFileService.insertAttachFileGroup();
			}
			
			for (MultipartFile file : files) {

				String savedName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
				String uploadedFileName = savedPath.replace(File.separatorChar, '/') + "/" + savedName;

				AttachFileVO attachFileVO = AttachFileVO.builder()
							.atchFileGroupNo(atchFileGroupNo)
							.atchFileOrnlFileNm(file.getOriginalFilename())
							.atchFileNm(savedName)
							.atchFileSize(file.getSize())
							.atchFileFancysize(FileUtils.byteCountToDisplaySize(file.getSize()))
							.atchFileExtsn(FilenameUtils.getExtension(uploadedFileName))
							.atchFilePath(uploadedFileName)
							.build();
				
				attachFileService.insertSavedFile(attachFileVO);

				File target = new File(savedPath, savedName);

				file.transferTo(target);
				saveFileNames.add(uploadedFileName);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return atchFileGroupNo;
	}

	private static String getFolderName(String path, TableCode code) {

		String folderName = "";

		if (code.equals(TableCode.EMPLOYEE)) {
			folderName = "employee";
		}
		else if (code.equals(TableCode.BOARD)) {
			folderName = "board";
		}
		else if (code.equals(TableCode.MESSAGE)) {
			folderName = "message";
		}
		else if (code.equals(TableCode.EMAIL)) {
			folderName = "mail";
		}
		else if (code.equals(TableCode.MEMO)) {
			folderName = "memo";
		}
		else if (code.equals(TableCode.PROJECT)) {
			folderName = "project";
		}
		else if (code.equals(TableCode.DRAFT)) {
			folderName = "draft";
		}

		path += folderName;

		createFolder(path);

		return path;
	}

	private static void createFolder(String path) {

		File uploadDir = new File(path);

		if (!uploadDir.exists()) {
			uploadDir.mkdirs();
		}
	}
	
	public MediaType getMediaType(String type) {
		return mediaMap.get(type.toUpperCase()) == null ? MediaType.APPLICATION_OCTET_STREAM : mediaMap.get(type.toUpperCase());
	}
	
	public ResponseEntity<byte[]> getFileEntity(String path, boolean addHeader) {
		
		ResponseEntity<byte[]> entity = null;
		
		String fileName = path.substring(path.indexOf("_")+1);
		String fileType = FilenameUtils.getExtension(fileName);
		
		MediaType type = getMediaType(fileType);
		
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(type);
		
		File file = new File(path);
		
		if(!file.exists()) {
			log.error(this + "_FileNotFound");
			return null;
		}
		
		try {
			byte[] fileData = FileUtils.readFileToByteArray(file);
			
			if(addHeader) {
				headers.add(headers.CONTENT_DISPOSITION, "attachment; filename=" 
					+ new String(fileName.getBytes(StandardCharsets.UTF_8), StandardCharsets.ISO_8859_1));
			}
			
			entity = new ResponseEntity<byte[]>(fileData, headers, HttpStatus.CREATED);
			
		} catch (IOException e) {
			e.printStackTrace();
			entity = new ResponseEntity<byte[]>(HttpStatus.BAD_REQUEST);
		}
		
		return entity;
	}
	
	public void fileDelete(String path) {
		File file = new File(path);
		if(file.exists()) {
			file.delete();
			log.debug(path + " 파일 삭제 완료");
		}else {
			log.debug("[WARNING] 파일이 존재하지 않습니다!");
		}
	}
	
	public boolean isImageFile(String ext) {
		switch (ext) {
			case "JPG":
			return true;
			case "JPEG":
			return true;
			case "PNG":
			return true;
			case "GIF":
			return true;
		}
		return false;
	}
}
