package kr.or.ddit.groupware.service.rental;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.log;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import kr.or.ddit.groupware.mapper.rental.IRentalMapper;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.vo.RentalVO;
import lombok.extern.java.Log;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@Service
public class RentalServiceImpl implements IRentalService {

	@Autowired
	private IRentalMapper rentalMapper;

	@Override
	public Result RentVehicle(RentalVO rentalVO) {
		Result res = null;

		int cnt = rentalMapper.rentVehicle(rentalVO);

		if (cnt > 0) {
			res = Result.OK;
		}
		else {
			{
				res = Result.FAILED;
			}
		}
		return res;
	}

	@Override
	public Result RentSupplies(RentalVO rentalVO) {
		Result res = null;

		int cnt = rentalMapper.rentSupplies(rentalVO);

		if (cnt > 0) {
			res = Result.OK;
		}
		else {
			{
				res = Result.FAILED;
			}
		}
		return res;
	}

	@Override
	public List<RentalVO> getReservationsByResourceType(RentalVO rentalVO) {
		return rentalMapper.findRentalByResourceType(rentalVO);
	}

	@Override
	public boolean isRentalPossible(RentalVO rentalVO) {
		
		 List<RentalVO> conflicts = rentalMapper.findOverlappingRentals(
		            rentalVO.getEqpnmCd(),
		            rentalVO.getErntBeginDt(),
		            rentalVO.getErntEndDt()
		        );
		        return conflicts.size() == 0;
		    }

	@Override
	public boolean deleteRentalVehicle(RentalVO rentalVO) {
		return rentalMapper.cancleRentalVehicle(rentalVO);
	}

	@Override
	public boolean deleteRentalSupplies(RentalVO rentalVO) {
		return rentalMapper.cancleRentalSupplies(rentalVO);
		
	}


}
