package kr.or.ddit.groupware.service.approval;

import java.sql.SQLException;
import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.groupware.mapper.approval.IApprovalMapper;
import kr.or.ddit.groupware.util.FileUtil;
import kr.or.ddit.groupware.util.Result;
import kr.or.ddit.groupware.util.TableCode;
import kr.or.ddit.groupware.vo.ApprovalVO;
import kr.or.ddit.groupware.vo.OrganizationTreeVO;
import kr.or.ddit.groupware.vo.SanctionerBookmarkGroupVO;
import kr.or.ddit.groupware.vo.SanctionerBookmarkVO;
import kr.or.ddit.groupware.vo.SanctionerVO;

/**
 * 전자 결재 서비스 구현체
 * @author <strong>이명문</strong>
 * @version 1.0
 * @see ApprovalServiceImpl
 */
@Service
public class ApprovalServiceImpl implements IApprovalService {
	
	@Inject
	private IApprovalMapper approvalMapper;
	
	@Inject
	private FileUtil fileUtil;

	@Override
	public List<ApprovalVO> selectDraftList(ApprovalVO approvalVO) {
		return approvalMapper.selectDraftList(approvalVO);
	}

	@Override
	public List<OrganizationTreeVO> selectOragnTree() {
		return approvalMapper.selectOragnTree();
	}

	@Override
	public int insertSanctionerGroup(SanctionerBookmarkGroupVO vo) {
		return approvalMapper.insertSanctionerGroup(vo);
	}

	@Override
	@Transactional(rollbackFor = SQLException.class)
	public Result insertSanctioner(SanctionerBookmarkVO[] bookmarkList) {
		
		int cnt = 0;
		for (SanctionerBookmarkVO sanctionerBookmarkVO : bookmarkList) {
			cnt = approvalMapper.insertSanctioner(sanctionerBookmarkVO);
			if(cnt <= 0) {
				throw new RuntimeException();
			}
		}
		
		if(cnt > 0)
			return Result.OK;
		
		return Result.FAILED;
	}

	@Override
	public List<SanctionerBookmarkGroupVO> selectMyLine(SanctionerBookmarkGroupVO vo) {
		return approvalMapper.selectMyLine(vo);
	}
	
	@Transactional(rollbackFor = {Exception.class})
	@Override
	public Result insertApproval(ApprovalVO approvalVO) {
		List<MultipartFile> files = approvalVO.getFiles();
		
		if(files != null) {
			int atchFileGroupNo = fileUtil.saveUploadFile(files, TableCode.DRAFT);
			approvalVO.setAtchFileGroupNo(atchFileGroupNo);
		}
		
		int result = approvalMapper.insertApproval(approvalVO);
		
		List<SanctionerVO> sanctionerList = approvalVO.getSanctionerList();
		for (SanctionerVO sanctionerVO : sanctionerList) {
			sanctionerVO.setAprovlNo(approvalVO.getAprovlNo());
			approvalMapper.insertSanctioners(sanctionerVO);
		}
		
		if(result > 0)
			return Result.OK;
		
		return Result.FAILED;
	}

	@Transactional(rollbackFor = {Exception.class})
	@Override
	public Result deleteMyLine(SanctionerBookmarkGroupVO vo) {
		int result = approvalMapper.deleteMyLine(vo);
		
		if(result <= 0)
			throw new RuntimeException();
		
		result = approvalMapper.deleteMyLineGroup(vo);
		
		if(result <= 0)
			throw new RuntimeException();
		
		return Result.OK;
	}

	@Override
	public ApprovalVO selectApprovalDocument(int aprovlNo) {
		return approvalMapper.selectApprovalDocument(aprovlNo);
	}

	@Override
	public List<ApprovalVO> selectApprovalList(SanctionerVO sanctionerVO) {
		return approvalMapper.selectApprovalList(sanctionerVO);
	}
}
