package kr.or.ddit.groupware.controller.employee;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.groupware.service.employee.IEmployeeService;
import kr.or.ddit.groupware.vo.EmailReceptionVO;
import kr.or.ddit.groupware.vo.EmailVO;
import kr.or.ddit.groupware.vo.EmpAuthorityVO;
import kr.or.ddit.groupware.vo.EmployeeVO;
import kr.or.ddit.groupware.vo.PaginationInfoVO;

/**
 * 사원관리 컨트롤러
 * 
 * @author <strong>최소희</strong>
 * @version 1.0
 * @see ManagementController
 */
@Controller
@RequestMapping("/employee")
public class ManagementController {
	
	@Inject
	private IEmployeeService service;
	
	/**
	 * 정상 사원 리스트
	 * @author 최소희
	 * @param currentPage
	 * @param searchType
	 * @param searchWord
	 * @param model
	 * @return
	 */
	@PreAuthorize("hasAnyRole('ROLE_MEMBER')")
	@GetMapping("/normalManagement")
	public String NormalEmployeeList(
			@RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "all") String searchType,
			@RequestParam(required = false) String searchWord,
			Model model) {
		
		PaginationInfoVO<EmployeeVO> pagingVO = new PaginationInfoVO<EmployeeVO>();
		
		// 검색이 이뤄지면 아래가 실행됨
		// 검색이 이뤄졌다는 걸 정확하게 확인하기 위해서는 searchWord가 비어있지 않을 때
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchType", searchType);
			model.addAttribute("searchWord", searchWord);
		}
		
		// startRow, endRow, startPage, endPage를 설정
		pagingVO.setCurrentPage(currentPage);
		
		// 사원 이용상태 추가
		pagingVO.setEnabled(1);
		
		// totalRecord라는 총 게시글 수
		int totalRecord = service.emplListCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);	// totalPage 설정
		
		List<EmployeeVO> dataList = service.selectEmplList(pagingVO);
		pagingVO.setDataList(dataList);
		
		List<EmpAuthorityVO> authList = new ArrayList<EmpAuthorityVO>();
		
		for (EmployeeVO employeeVO : dataList) {
			authList = service.selectAuthList(employeeVO.getEmplNo());
			employeeVO.setAuthList(authList);
		}
		
		model.addAttribute("pagingVO",pagingVO);
		
		return "employee/normalManagement";
	}
	
	/**
	 * 중지 사원 리스트
	 * @author 최소희
	 * @param currentPage
	 * @param searchType
	 * @param searchWord
	 * @param model
	 * @return
	 */
	@PreAuthorize("hasAnyRole('ROLE_MEMBER')")
	@GetMapping("/stopManagement")
	public String StopEmployeeList(
			@RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "all") String searchType,
			@RequestParam(required = false) String searchWord,
			Model model) {
		
		PaginationInfoVO<EmployeeVO> pagingVO = new PaginationInfoVO<EmployeeVO>();
		
		// 검색이 이뤄지면 아래가 실행됨
		// 검색이 이뤄졌다는 걸 정확하게 확인하기 위해서는 searchWord가 비어있지 않을 때
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchType", searchType);
			model.addAttribute("searchWord", searchWord);
		}
		
		// startRow, endRow, startPage, endPage를 설정
		pagingVO.setCurrentPage(currentPage);
		
		// 사원 이용상태 추가
		pagingVO.setEnabled(0);
		
		// totalRecord라는 총 게시글 수
		int totalRecord = service.emplListCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);	// totalPage 설정
		
		List<EmployeeVO> dataList = service.selectEmplList(pagingVO);
		pagingVO.setDataList(dataList);
		
		List<EmpAuthorityVO> authList = new ArrayList<EmpAuthorityVO>();
		
		for (EmployeeVO employeeVO : dataList) {
			authList = service.selectAuthList(employeeVO.getEmplNo());
			employeeVO.setAuthList(authList);
		}
		
		model.addAttribute("pagingVO",pagingVO);
		
		return "employee/stopManagement";
	}
	
	@PreAuthorize("hasAnyRole('ROLE_MEMBER')")
	@GetMapping("/detail")
	public String selectEmployee() {
		
		return "employee/employeeDetail";
	}
	
	
	
}
